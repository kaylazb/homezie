// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                String    @id @default(uuid())
  name              String
  email             String    @unique
  password          String
  phone_number      String?
  profile_picture   String?
  gender            String?
  birthdate         DateTime?
  address           String?
  role              String    @default("CUSTOMER")
  is_verified       Boolean?   @default(false)
  verification_token String?
  last_login        DateTime?
  login_attempts    Int       @default(0)
  blocked_until     DateTime?
  device_type       String?
  device_id         String?
  last_ip           String?
  last_location     String?
  socket_id         String?
  fcm_token         String?

  wallet            Wallet?
  topups            Topup[]
  withdrawals       Withdrawal[]
  bookings          Booking[]
  chatsSent         Chat[]     @relation("ChatsSent")
  chatsReceived     Chat[]     @relation("ChatsReceived")
  chatRooms1        ChatRoom[] @relation("ChatRooms1")
  chatRooms2        ChatRoom[] @relation("ChatRooms2")
  chatRoomMessages  ChatRoomMessage[]
}

model Wallet {
  id        String               @id @default(uuid())
  user_id   String               @unique
  balance   Int                  @default(0)
  user      User                 @relation(fields: [user_id], references: [id])
  transactions WalletTransaction[]
  transfersFrom     Transfer[]           @relation("FromWalletTransfers")
  transfersTo       Transfer[]           @relation("ToWalletTransfers")
}

model WalletTransaction {
  id         String   @id @default(uuid())
  wallet_id  String
  amount     Int
  type       String
  reference  String //digunakan untuk menuimpan reference id dari payment gateway
  created_at DateTime @default(now())

  wallet     Wallet   @relation(fields: [wallet_id], references: [id])
}

model Topup {
  id         String   @id @default(uuid())
  user_id    String
  amount     Int
  status     String
  created_at DateTime @default(now())

  user       User     @relation(fields: [user_id], references: [id])
}

model Withdrawal {
  id             String   @id @default(uuid())
  user_id        String
  amount         Int
  bank_code      String
  account_number String
  status         String
  created_at     DateTime @default(now())

  user           User     @relation(fields: [user_id], references: [id])
}

model BusClass {
  id          String @id @default(uuid())
  name        String
  description String

  buses       Bus[]
}

model Bus {
  id           String    @id @default(uuid())
  name         String
  capacity     Int
  bus_class_id String
  busClass     BusClass  @relation(fields: [bus_class_id], references: [id])
  schedules    Schedule[]
}

model Route {
  id          String     @id @default(uuid())
  origin      String
  destination String
  schedules   Schedule[]
}

model Schedule {
  id         String    @id @default(uuid())
  bus_id     String
  route_id   String
  departure  DateTime
  arrival    DateTime
  price      Int
  bus        Bus       @relation(fields: [bus_id], references: [id])
  route      Route     @relation(fields: [route_id], references: [id])
  bookings   Booking[]
}

model Booking {
  id           String    @id @default(uuid())
  user_id      String
  schedule_id  String
  total_amount Int
  status       String
  created_at   DateTime @default(now())

  user         User      @relation(fields: [user_id], references: [id])
  schedule     Schedule  @relation(fields: [schedule_id], references: [id])
  seats        BookingSeat[]
  payment      Payment?
}

model BookingSeat {
  id          String   @id @default(uuid())
  booking_id  String
  seat_number String

  booking     Booking  @relation(fields: [booking_id], references: [id])
}

model Payment {
  id          String   @id @default(uuid())
  booking_id  String   @unique
  amount      Int
  status      String
  created_at  DateTime @default(now())

  booking     Booking  @relation(fields: [booking_id], references: [id])
}

model Chat {
  id          String   @id @default(uuid())
  sender_id   String
  receiver_id String
  message     String
  created_at  DateTime @default(now())
  updated_at  DateTime @default(now())
  is_read     Boolean  @default(false)

  sender      User     @relation("ChatsSent", fields: [sender_id], references: [id])
  receiver    User     @relation("ChatsReceived", fields: [receiver_id], references: [id])
}

model ChatRoom {
  id         String   @id @default(uuid())
  user_id1   String
  user_id2   String
  created_at DateTime @default(now())

  user1      User     @relation("ChatRooms1", fields: [user_id1], references: [id])
  user2      User     @relation("ChatRooms2", fields: [user_id2], references: [id])
  messages   ChatRoomMessage[]
}

model ChatRoomMessage {
  id         String   @id @default(uuid())
  room_id    String
  sender_id  String
  message    String
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  is_read    Boolean  @default(false)

  room       ChatRoom @relation(fields: [room_id], references: [id])
  sender     User     @relation(fields: [sender_id], references: [id])
}

enum Role {
  ADMIN
  CUSTOMER
  DRIVER
}

model Transfer {  
  id              String   @id @default(uuid())
  from_wallet_id  String
  to_wallet_id    String
  amount          Int
  reference       String
  status          String   @default("PENDING")
  created_at      DateTime @default(now())
  completed_at    DateTime?

  fromWallet      Wallet   @relation("FromWalletTransfers", fields: [from_wallet_id], references: [id])
  toWallet        Wallet   @relation("ToWalletTransfers", fields: [to_wallet_id], references: [id])
}